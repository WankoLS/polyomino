import unittest
from parameterized import parameterized
from main import main


class Test(unittest.TestCase):
    # params: 1) m1, m2 2) rs 3) ls
    @parameterized.expand([

        (5, 8, [((2, 2), 5)], [((3, 2), 1), ((2, 2), 2)]),
        (5, 6, [((2, 2), 4)], [((3, 2), 1), ((2, 2), 2)]),
        (3, 5, [((2, 2), 1)], [((3, 2), 1), ((2, 2), 2)]),
        (5, 6, [((2, 2), 3)], [((3, 2), 2), ((2, 2), 3)]),
        (6, 8, [((2, 2), 1)], [((3, 2), 6), ((2, 2), 5)]),
        (6, 9, [((2, 2), 3), ((3,3),1)], [((3, 2), 1), ((2, 2), 2), ((5,3),3)]),
        (10, 6, [((3, 3), 2), ((2, 2), 4)], [((4, 2), 1), ((2, 8), 3), ((2, 2), 1), ((2,5),2)])
    ])
    def test_positive(self, *args):
        self.assertEqual(True, main(*args))

    @parameterized.expand([

        (5, 8, [((2, 2), 5)], [((3, 2), 15), ((2, 2), 2)]),
        (5, 6, [((2, 2), 9)], [((3, 2), 1), ((2, 2), 2)]),
        (3, 5, [((2, 2), 1)], [((3, 7), 1), ((2, 2), 2), ((5, 8), 3)]),
        (5, 6, [((2, 2), 3), ((9, 9), 1)], [((3, 2), 2), ((1, 2), 1)]),
        (6, 8, [((9, 9), 1)], [((3, 2), 6), ((2, 2), 5)]),
        (6, 9, [((2, 2), 3), ((3, 3), 1)], [((3, 2), 1), ((2, 2), 2), ((5, 3), 3)]),
        (10, 6, [((3, 3), 2), ((2, 2), 4)], [((5, 2), 1), ((2, 4), 1), ((2, 2), 6)])
    ])
    def test_negative(self, *args):
        self.assertFalse(True, main(*args))

if __name__ == '__main__':
    unittest.main()